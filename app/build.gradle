/**
 * plugins 和 apply plugin 的区别：
 * plugins 是一种比较新的方法，它所引用的插件必须在 Gradle plugin repository 的仓库可见的
 * apply plugin 是一种比较老的方式，在 Android4.1 的时候，创建项目的时候，已经将 apply plugin 方法替换为 plugins
 *
 */
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
    id "com.google.protobuf" version "0.8.12"
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "cn.imppp.skin"
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions{
        jvmTarget = JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    // proto配置设置
    sourceSets {
        main {
            proto {
                // proto 文件默认路径是 src/main/proto
                // 可以通过 srcDir 修改 proto 文件的位置
                srcDir 'src/main/proto'
            }
        }
    }
}

kapt {
    generateStubs = true
}
repositories {
    mavenCentral()
}

/**
 * 注意配置 protoc 命令，分为不同的版本，版本不同配置的方式不同，
 * 网上大部分都是 3.0.x ~ 3.7.x 的配置方式，关于这种配置方法，可以查看 [protobuf-gradle-plugin](https://github.com/google/protobuf-gradle-plugin)  文档，这里不在演示了，也不建议使用
 * 在此项目中使用的是 3.8 以后 的配置的配置，
 */
protobuf {
    // 设置 protoc 的版本
    protoc {
        // //从仓库下载 protoc 这里的版本号需要与依赖 com.google.protobuf:protobuf-javalite:xxx 版本相同
        artifact = 'com.google.protobuf:protoc:3.10.0'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option "lite"
                }
            }
        }
    }

    // 默认生成目录 $buildDir/generated/source/proto 通过 generatedFilesBaseDir 改变生成位置
    generatedFilesBaseDir = "$projectDir/src/main"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation rootProject.ext.support["constraintlayout"]

    implementation 'com.qmuiteam:qmui:2.0.0-alpha08'
    implementation 'com.qmuiteam:arch:2.0.0-alpha08'

    implementation rootProject.ext.dependencies["okhttp"]
    implementation rootProject.ext.dependencies["coroutines-android"]
    implementation rootProject.ext.dependencies["coroutines-core"]
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["moshi"]
    implementation rootProject.ext.dependencies["moshi-kotlin-json"]
    implementation rootProject.ext.dependencies["moshi-convert"]
    implementation rootProject.ext.dependencies["logging-interceptor"]
    implementation rootProject.ext.dependencies["gson"]
    implementation rootProject.ext.dependencies["viewModel"]
    implementation rootProject.ext.dependencies["liveData"]

    implementation project(':netmodlelibrary')
    implementation project(':multitype-adapter-library')    // 多样式条目加载

    // 存储方式
    implementation rootProject.ext.dependencies["mmkv"]
    // dataStore存储方式
    implementation rootProject.ext.dependencies["datastore-preferences"]
    implementation rootProject.ext.dependencies["proto-datastore"]
    implementation rootProject.ext.dependencies["protobuf"]
}
